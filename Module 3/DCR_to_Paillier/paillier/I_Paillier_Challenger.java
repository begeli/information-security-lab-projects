package paillier;

import java.math.BigInteger;

import basics.IChallenger;
import schemes.RSA_Modulus;

/**
 * A Paillier challenger plays the Ind-CPA security game of the Paillier
 * public-key encryption scheme with implementations of the
 * {@code I_Paillier_Adversary} interface.
 * <p>
 * Adversaries which play the Ind-CPA security game with this challenger will --
 * when their run() method is called -- always ask the challenger for a public
 * key of the Paillier encryption scheme. After receiving a Paillier encryption
 * scheme, the adversary will ask the challenger for a challenge ciphertext by
 * calling its {@code getChallenge(BigInteger m_0, BigInteger m_1)} method. When
 * receiving a ciphertext c, the adversary tries to determine which message has
 * been encrypted in c. If c is an encryption of m_0 under the given public key,
 * then the adversary will always return 0 in its run() method. If c is an
 * encryption of m_1 under the given public key, then the adversary will always
 * return 1 in its run() method. In all other cases, there are no guarantees
 * which number the adversary will return.
 */
public interface I_Paillier_Challenger extends IChallenger {
    /**
     * An adversary in the Ind-CPA security game of the Paillier public-key
     * encryption scheme will call this method after it got a public key for the
     * encryption scheme. It will submit two candidate messages in this method. The
     * challenger needs to encrypt one of them and return the encryption of one of
     * the messages in this method.
     * <p>
     * When receiving a ciphertext c, the adversary tries to determine which message
     * has been encrypted in c. If c is an encryption of m_0 under the given public
     * key, then the adversary will always return 0 in its run() method. If c is an
     * encryption of m_1 under the given public key, then the adversary will always
     * return 1 in its run() method. In all other cases, there are no guarantees
     * which number the adversary will return.
     * <p>
     * Remember that ciphertexts in the Paillier scheme are generated by r^N *
     * (1+N)^{m} mod N^2, where m is the message to be encrypted and r <-- (Z/NZ)^*
     * is the encryption randomness.
     * 
     * @param m_0 the first candidate message the adversary submits.
     * @param m_1 the second candidate message the adversary submits.
     * @return the challenge ciphertext c returned by the challenger. In the normal
     *         Ind-CPA game, c is either an encryption of m_0 or m_1.
     */
    public BigInteger getChallenge(BigInteger m_0, BigInteger m_1);

    /**
     * An adversary in the Ind-CPA security game of the Paillier public-key
     * encryption scheme will call this method to get the public key of the
     * encryption scheme. The public key of a Paillier encryption scheme is simply
     * an RSA modulus.
     * 
     * In a run, this method should always return the same public key, no matter how
     * often it has been asked.
     * 
     * @return the modulus of the (simplified) Paillier encryption scheme N = p * q.
     */
    public RSA_Modulus getPaillierPK();

}
